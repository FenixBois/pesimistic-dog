// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model School {
    id                String     @id @default(cuid())
    name              String
    studyProgrammes   StudyProgramme[]
}

model StudyProgramme  {
    id                String     @id @default(cuid())
    title             String

    schoolId          String
    school            School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)

    subjects          Subject[]
}

model Subject {
    id                String          @id @default(cuid())
    title             String
    description       String

    studyProgrammeId  String
    studyProgramme    StudyProgramme   @relation(fields: [studyProgrammeId], references: [id], onDelete: Cascade)

    contents          ContentInSubject[]
    topics            Topic[]
}

model Content {
    id                String          @id @default(cuid())
    title             String
    link              String

    topics            ContentInTopic[]
    subjects          ContentInSubject[]
}

model Topic {
    id                String          @id @default(cuid())
    title             String
    description       String
    orderNumber       Integer

    contents          ContentInTopic[]

    subjectId         String
    subject           Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model ContentInTopic {
    contentId         String
    content           Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)

    topicId           String
    topic             Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@id([contentId, topicId])
}

model ContentInSubject {
    contentId         String
    content           Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)

    subjectId           String
    subject             Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

    @@id([contentId, topicId])
}